{"meta":{"title":"XIAOHU blog","subtitle":"Welcome to my blog","description":"愿你走出半生路 归来仍是少年","author":"XIAOHU","url":"http://yoursite.com","root":"/"},"pages":[{"title":"文章分类","date":"2017-05-27T05:47:40.000Z","updated":"2020-03-02T08:14:54.853Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2017-05-27T05:47:40.000Z","updated":"2020-03-02T07:19:57.631Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"http协议","slug":"article4","date":"2020-03-09T01:52:56.000Z","updated":"2020-03-09T02:53:05.402Z","comments":true,"path":"2020/03/09/article4/","link":"","permalink":"http://yoursite.com/2020/03/09/article4/","excerpt":"","text":"HTTP 超文本传输协议 Hyper Text Transfer Protocol 当我们在浏览器的地址栏输入一个地址的时候，就能够访问服务器的某个页面 这个过程本身就是两个应用程序之间的交互，一个应用程序是浏览器，另一个应用程序是服务器。 协议是什么？ 协议就是不同的应用程序之间按照事先做好的约定进行的通信。 这样就能互相读懂对方的意思。 浏览器和WEB服务器之间，使用的就是一种叫做HTTP的协议。 这样是BS (Browser Server )架构模型的基础 请求消息请求消息 由 请求行，请求头部，空行和请求数据4部分组成 1.请求行格式：请求方式 资源路径 HTTP版本号举例：GET/test.html HTTP/1.1请求方式：POST,HEAD,OPTIONS,DELETE,TRACE,PUT 2.请求头 请求头部信息提供了如下信息:Host: 主机名User-Agent: 浏览器基本资料Accept: 浏览器能够识别的响应类型Accept-Language: 浏览器默认语言Accept-Encoding: 浏览器能够识别的压缩方式Referer: 来路页面， /addHero 这个路径是通过addHero.html这个页面跳转过来的。Connecton：是否保持连接 3.请求数据​ post方法中，会把数据以key value形式发送请求 4.空行​ 发送回车符和换行符，通知服务器以下不再有请求头 响应消息响应信息由状态行，响应头，响应正文组成 1.状态行格式如下： HTTP-Version Status-Code Reason-Phrase CRLF 其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。 HTTP状态码当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。HTTP状态码的英文为HTTP Status Code。状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。 1xx：指示信息–表示请求已接收，继续处理。 2xx：成功–表示请求已被成功接收、理解、接受。 3xx：重定向–要完成请求必须进行更进一步的操作。 4xx：客户端错误–请求有语法错误或请求无法实现。 5xx：服务器端错误–服务器未能实现合法的请求。 2.HTTP响应头响应头的方法 3.响应正文如图所示，在响应正文里就会是具体的html内容了。当然访问不同的页面，就不一定是html，有可能是css, js,甚至图片了。","categories":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/categories/jsp/"}],"tags":[{"name":"jsp开发","slug":"jsp开发","permalink":"http://yoursite.com/tags/jsp%E5%BC%80%E5%8F%91/"}]},{"title":"spring1","slug":"spring1","date":"2020-03-08T12:04:26.000Z","updated":"2020-03-08T12:42:58.438Z","comments":true,"path":"2020/03/08/spring1/","link":"","permalink":"http://yoursite.com/2020/03/08/spring1/","excerpt":"","text":"spring:耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。 工厂模式:在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。那么，这个读取配置文件，创建和获取三层对象的类就是工厂。 解决程序耦合的思路 当是我们讲解 jdbc 时，是通过反射来注册驱动的，代码如下： Class.forName(\"com.mysql.jdbc.Driver\");//此处只是一个字符串 此时的好处是，我们的类中不再依赖具体的驱动类，此时就算删除 mysql 的驱动 jar 包，依然可以编译（运 行就不要想了，没有驱动不可能运行成功的）。 同时，也产生了一个新的问题，mysql 驱动的全限定类名字符串是在 java 类中写死的，一旦要改还是要修改 源码。 解决这个问题也很简单，使用配置文件配置。 工厂模式解耦 在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的 方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。 那么，这个读取配置文件，创建和获取三层对象的类就是工厂。 1、存哪去？ 分析：由于我们是很多对象，肯定要找个集合来存。 这时候有 Map 和 List 供选择。 到底选 Map 还是 List 就看我们有没有查找需求。有查找需求，选 Map。 所以我们的答案就是 在应用加载时，创建一个 Map，用于存放三层对象。 我们把这个 map 称之为容器。 2、还是没解释什么是工厂？ 工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。 原来： 我们在获取对象时，都是采用 new 的方式。是主动的。 现在: 资源文件: beans.xml xml12345678 bean>beans> 运行Client.xml swift123456789101112131415161718192021222324252627282930313233343536373839package com.ui;import com.service.IAcountService;import com.service.implement.AccountServiceImpl;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.xml.XmlBeanFactory;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.context.support.FileSystemXmlApplicationContext;import org.springframework.core.io.ClassPathResource;import org.springframework.core.io.Resource;public class Client { public static void main(String[] args) {// IAcountService as = new AccountServiceImpl();// as.saveAccount();// ApplicationContext的三个常用实现类// ClassPathXmlApplicationContext 加载类路径下的配置文件，不在不能加载// FileSystemXmlApplicationContext 加载磁盘任意路径下的配置文件(必须有访问权限)// AnnotationConfigApplicationContext 用于读取注解创建容器// 两个接口引发的问题// ApplicationContext 采用立即加载的方式// 单例对象适用// BeanFactory : 采用延迟加载,id获取对象了，才会真正加载// 多例对象适用// 1.获取核心容器对象// ApplicationContext ac = new ClassPathXmlApplicationContext(\"bean.xml\");// ApplicationContext ac = new FileSystemXmlApplicationContext()// 2.根据id获取bean对象// IAcountService as = (IAcountService) ac.getBean(\"acccountService\");// System.out.println(as);// Resource resource = new ClassPathResource(\"bean.xml\");// BeanFactory factory =new XmlBeanFactory(resource); }}","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"spring","slug":"spring","permalink":"http://yoursite.com/tags/spring/"}]},{"title":"jsp学习阶段总结","slug":"article3","date":"2020-03-06T08:32:37.000Z","updated":"2020-03-06T09:06:11.877Z","comments":true,"path":"2020/03/06/article3/","link":"","permalink":"http://yoursite.com/2020/03/06/article3/","excerpt":"","text":"要相信，成功并不是成功者的专利，今天的你，不过是少了一点点机会加上毫不动摇的努力。努力让今天过得更有价值，才更有可能实现明天的美好。 接近一个暑假的学习jsp时光带给了我许多。 1.香水商店首先是一个神奇的香水商店，你的香水有毒啊！！！ 2.水果商店然后还有一个水果商店，鬼知道水果商店为什么卖洋葱和西红柿？？？ 3.个人博客第一代然后是上一个版本的个人博客，若大家有兴趣可以再去参观一下 http://47.95.13.8:8080/ceshi/ 呦呦鹿鸣，食野之苹 4.武汉加油想回学校啊，在家是真的无趣，想出门放飞自我，想出去逛吃……武汉加油啊,希望疫情赶紧过去吧。 山河无恙，人间皆安；冬已尽，春可期 http://47.95.13.8:8080/shiyan1_1/ 5.个人商城登陆模块实现完成于前几天。","categories":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/categories/jsp/"}],"tags":[{"name":"jsp开发","slug":"jsp开发","permalink":"http://yoursite.com/tags/jsp%E5%BC%80%E5%8F%91/"}]},{"title":"hexo的主题更换","slug":"article2","date":"2020-03-02T07:42:36.000Z","updated":"2020-03-02T08:08:10.103Z","comments":true,"path":"2020/03/02/article2/","link":"","permalink":"http://yoursite.com/2020/03/02/article2/","excerpt":"","text":"上一篇文章，介绍了如何利用 hexo+github pages 搭建个人博客。那么这篇文章则以我的博客为例详细教你打造个性超赞博客的主题。 现如今用的人最多的是next这个主题，而本人在昨天发现一个神仙主题：Butterfly,It’s so beautiful . 这个主题不过有点废图， 提供2个自己搜图用的网站 https://wallroom.io/ https://www.pexels.com/ 安装在你的博客根目录里 git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly 应用主题修改站点配置文件_config.yml，把主题改为Butterfly theme: Butterfly 配置配置文件说明站点配置文件config.yml是hexo工作目录下的主配置文件(还不知道是哪里的，自己google)butterfly.yml是Butterfly的配置文件。它需要你手动将主题目录下的 _config.yml 文件复制到 hexo 工作目录的source/data/butterfly.yml中。如果文件或者文件夹不存在，需要手动创建。*语言修改站点配置文件 _config.yml 默认语言是en 主题支持三种语言 ​ default(en)​ zh-CN (简体中文)​ zh-TW (繁体中文) 导航菜单配置menu: 首页: / || fa fa-home 归档: /archives/ || fa fa-archive 标签: /tags/ || fa fa-tags 分类: /categories/ || fa fa-folder-open 下面是butterfly的官方文档： https://jerryc.me/posts/21cfbf15/#%E5%BF%AB%E9%80%9F%E9%96%8B%E5%A7%8B 然后是本人的博客地址。 https://moyang-mu.github.io/ 总而言之，虽然今天有课，然本人昨天还是战斗到了12点半，从下午三点开始，除了吃饭时间基本都在调bug，今天早上也是调了一上午，真是身心俱疲啊。 还想说一句，就是我昨天因为默认开启了图片懒加载，但又没配置好，结果导致图片只有data-src属性，没有src属性，结果就是自然不能显示了。哎，想想都是泪，昨天晚上基本都是在看代码和博客还有官方文档中度过。","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"jsp1","slug":"jsp1-1","date":"2020-03-02T07:22:45.000Z","updated":"2020-03-02T08:46:49.999Z","comments":true,"path":"2020/03/02/jsp1-1/","link":"","permalink":"http://yoursite.com/2020/03/02/jsp1-1/","excerpt":"","text":"jsp的九大内置对象 bash1234jsp就本质相当于一个servlet，jsp的发明是为了简化我们对servlet的编写，用于在service方法中直接输出， 其中编写的java代码将会在添加到service方法中实现， jsp的重定向和请求转发 bash1234重定向是服务器将这个请求返回给浏览器，浏览器进行重新请求，区别在于，这次的请求的地址使用你上一次传回给他的。请求转发则是这个请求的内容等都不变，只不过把这个请求拿到另一个页面进行处理，处理完的结果在原页面显示。绝对路径:相对于项目的根路径，在路径前+上/相对路径:使用./或者什么都不加 由于cokkie部分版本不识别中文，导致可能出现中文乱码 bash1解决方案:使用两个工具类进行转码，URLEncoder在存储数据时候转码，URLDecoder在取出数据时进行转码。 Request在服务器请求资源原理解析 bash12 Requset在service中使用map集合一次性取出提交的表单数据的方法","categories":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/categories/jsp/"}],"tags":[{"name":"jsp开发","slug":"jsp开发","permalink":"http://yoursite.com/tags/jsp%E5%BC%80%E5%8F%91/"}]},{"title":"hexo的搭建","slug":"article","date":"2017-05-26T04:12:57.000Z","updated":"2020-03-02T07:47:47.725Z","comments":true,"path":"2017/05/26/article/","link":"","permalink":"http://yoursite.com/2017/05/26/article/","excerpt":"","text":"本文使用的是在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。 第一部分 hexo的初级搭建还有部署到github page上，以及个人域名的绑定。(因为囊中羞涩，暂时未购买域名，嘿嘿) Hexo搭建步骤 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 将hexo部署到GitHub 设置个人域名 发布文章 1.安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程 windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码sudo apt-get install git 2.安装nodejs Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 windows：nodejs选择LTS版本就行了 安装完成后，检查一下 node -v npm -v 3. 安装hexo 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 npm install -g hexo-cli 依旧用hexo -v查看一下版本 至此就全部安装完了。 接下来初始化一下hexo hexo init myblog 这个myblog可以自己取什么名字都行，然后 cd myblog //进入这个myblog文件夹 npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章和一些其他图片资源等 themes：主题 ** _config.yml: 博客的配置文件** hexo g hexo server 使用ctrl+c可以把服务关掉。 4. GitHub创建个人仓库首先，你先要有一个GitHub账户，去注册一个吧。 注册完登录后，在GitHub.com中看到一个New repository，新建仓库 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。 点击create repository。 5. 生成SSH添加到GitHubgit config --global user.name \"yourname\" git config --global user.email \"youremail\" 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 可以用以下两条，检查一下你有没有输对 git config user.name git config user.email 然后创建SSH,一路回车 ssh-keygen -t rsa -C \"youremail\" 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。 ssh -T git@github.com 6. 将hexo部署到GitHub 这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为YourgithubName就是你的GitHub账户 deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 npm install hexo-deployer-git --save hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西，将之前生成的静态页面等删除（与public文件有关）hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写hexo deploy 部署到github上，可以用hexo d缩写 注意deploy时可能要你输入username和password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 7. 设置个人域名现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。 转载： https://blog.csdn.net/sinat_37781304/article/details/82729029","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}